function format_area_y_ticks(a) {
    return d3.format(".0%")(a)
}

function format_area_x_ticks(a) {
    return "Term " + (a + 1)
}

function update_area(a, b) {
    a = a.nodes.map(function(a) {
        return {
            x: a.x_orig,
            y: a.value,
            short_name: a.short_name
        }
    });
    var c = d3.layout.stack().values(function(a) {
            return a.values
        }),
        d = chart_data.table.columns.map(function(a, b) {
            return b
        }),
        e = d3.scale.ordinal().domain(d).rangePoints([0, width - 60], 0),
        e = d3.scale.linear().domain([0, chart_data.table.columns.length - 1]).range([0, width - 60]),
        f = d3.scale.linear().domain([0, 1]).range([height - 45, 0]),
        g = (d3.scale.category20(), d3.svg.axis().scale(e).orient("bottom").tickSize(-(height - 40), 0, 0).tickFormat(format_area_x_ticks).ticks(chart_data.table.columns.length - 1)),
        h = d3.svg.axis().scale(f).orient("left").tickSize(-(width - 55), 0, 0).tickFormat(format_area_y_ticks),
        i = d3.svg.area().x(function(a) {
            return e(a.x)
        }).y0(function(a) {
            return f(a.y0 / total_number_students)
        }).y1(function(a) {
            return f(a.y0 / total_number_students + a.y / total_number_students)
        }).interpolate("monotone"),
        c = d3.layout.stack().values(function(a) {
            return a.values
        }),
        j = area_svg.select(".focus-circles"),
        k = j.selectAll(".circle").data(chart_data.table.rows, function(a) {
            return a
        });
    k.enter().append("g").attr("class", "circle").style("opacity", 0).append("circle").attr("r", 4).style("stroke-width", .5).style("stroke", "white").style("fill", function(a) {
        return get_color(a)
    }), k.exit().remove();
    var l = c(chart_data.table.rows.map(function(b) {
            return {
                name: b,
                focus_circle: k.filter(function(a) {
                    return a == b
                }),
                values: a.filter(function(a) {
                    return b == a.short_name
                }).map(function(a) {
                    return {
                        x: a.x,
                        y: a.y
                    }
                })
            }
        })),
        m = area_svg.select("g.area-group").on("mouseover", function() {
            $("body").append(tooltip)
        }).on("mouseout", function() {
            k.style("opacity", 0), $(".general-tooltip").remove()
        }),
        n = m.selectAll(".area-segment").data(l, function(a) {
            return a.name
        }),
        o = n.enter().append("g").attr("class", "area-segment").style("opacity", 0),
        p = d3.bisector(function(a) {
            return a.x
        }).left;
    o.append("path").attr("class", "area").style("fill", function(a) {
        return get_color(a.name)
    }).attr("d", function(a) {
        return i(a.values)
    }), n.on("mousemove", function(a) {
        var b = d3.mouse(this),
            c = e.invert(b[0] - e(1) / 2),
            d = p(a.values, c);
        if (area_focused_circle != a.values[d]) {
            area_focused_circle = a.values[d], tooltip_header.text(get_long_name(a.name) + " - Term " + (a.values[d].x + 1)), tooltip_header.css("border-bottom", "2px solid " + get_color(a.name)), tooltip_content.text("Students: " + a.values[d].y + " (" + d3.format(".1%")(a.values[d].y / total_number_students) + ")");
            var g = main_container.offset();
            b[0] < width / 2 ? (tooltip.css({
                right: "auto",
                left: g.left + 60 + e(a.values[d].x),
                top: g.top + 4 + f(a.values[d].y0 / total_number_students + a.values[d].y / total_number_students)
            }), tooltip.removeClass("right"), tooltip.addClass("left")) : (tooltip.css({
                right: "auto",
                left: g.left + 15 + e(a.values[d].x) - tooltip.width(),
                top: g.top + 4 + f(a.values[d].y0 / total_number_students + a.values[d].y / total_number_students)
            }), tooltip.removeClass("left"), tooltip.addClass("right")), a.focus_circle.moveToFront(), n.each(function(b, d) {
                var d = p(b.values, c);
                b.focus_circle.attr("transform", "translate(" + e(b.values[d].x) + "," + f(b.values[d].y0 / total_number_students + b.values[d].y / total_number_students) + ")").style("opacity", function() {
                    return b.values[d].y > 0 ? 1 : 0
                }).select("circle").transition().duration(animation_duration / 2).style("stroke-width", function(b) {
                    return b == a.name ? 3 : 1
                }).attr("r", function(b) {
                    return b == a.name ? 7 : 4
                })
            })
        }
    }), b ? (n.transition().duration(animation_duration).ease(animation_easing).style("opacity", 1), n.select("path").transition().duration(animation_duration).ease(animation_easing).attr("d", function(a) {
        return i(a.values)
    }), n.exit().transition().duration(animation_duration).ease(animation_easing).style("opacity", 0).remove()) : (n.style("opacity", 1), n.select("path").attr("d", function(a) {
        return i(a.values)
    }), n.exit().style("opacity", 0).remove()), area_svg.select(".x.axis").attr("transform", "translate(0," + (height - 40) + ")").call(g), area_svg.select(".y.axis").attr("transform", "translate(-5,0)").call(h)
}

function toTitleCase(a) {
    return a.replace(/[_]/g, " ").replace(/\w\S*/g, function(a) {
        return a.charAt(0).toUpperCase() + a.substr(1).toLowerCase()
    })
}

function clean_short_name(a) {
    return a.replace(/[_]/g, " ")
}

function partition_short_name(a, b) {
    for (var c = a.split(" "), d = [], e = 0, f = c[e] + " "; e < c.length;) e += 1, (f + c[e]).length >= b ? (d.push(f.substring(0, f.length - 1)), f = c[e] + " ") : f += c[e] + " ";
    return d
}

function get_slider_label_text(a, b) {
    var c, d;
    return c = a[0] <= b[0] ? "Min" : a[0], d = a[1] >= b[1] ? "Max" : a[1], c + " - " + d
}

function get_slider_values(a, b) {
    var c, d;
    return c = a[0] <= b[0] ? null : a[0], d = a[1] >= b[1] ? null : a[1], [c, d]
}

function add_to_combined_link(a, b, c, d) {
    a[b] ? a[b][c] ? a[b][c] += d : a[b][c] = d : (a[b] = {}, a[b][c] = d)
}

function calculate_simple_flow(a) {
    var b = {};
    a.nodes.forEach(function(a) {
        b[a.id] = a
    }), a.nodes = a.nodes.filter(function(a) {
        return "GRAD" == a.short_name || "STOP" == a.short_name
    }), a.table.rows = ["GRAD", "ENROLLED", "STOP"];
    var c = -1,
        d = {};
    a.nodes = [], a.table.columns.forEach(function(b, e) {
        a.nodes.push({
            id: ++c,
            name: "STOP" + e,
            short_name: "STOP",
            x: e,
            y: 0
        }), d["STOP" + e] = c, a.nodes.push({
            id: ++c,
            name: "ENROLLED" + e,
            short_name: "ENROLLED",
            x: e,
            y: 1
        }), d["ENROLLED" + e] = c, a.nodes.push({
            id: ++c,
            name: "GRAD" + e,
            short_name: "GRAD",
            x: e,
            y: 2
        }), d["GRAD" + e] = c
    }), console.log(d);
    var e = a.links,
        f = {};
    return a.links = [], e.forEach(function(a) {
        "GRAD" == b[a.source].short_name || "GRAD_OUTSIDE" == b[a.source].short_name ? "GRAD" == b[a.target].short_name || "GRAD_OUTSIDE" == b[a.target].short_name ? add_to_combined_link(f, d["GRAD" + b[a.source].x], d["GRAD" + b[a.target].x], a.value) : "STOP" == b[a.target].short_name || "STOP_OUTSIDE" == b[a.target].short_name ? add_to_combined_link(f, d["GRAD" + b[a.source].x], d["STOP" + b[a.target].x], a.value) : add_to_combined_link(f, d["GRAD" + b[a.source].x], d["ENROLLED" + b[a.target].x], a.value) : "STOP" == b[a.source].short_name || "STOP_OUTSIDE" == b[a.source].short_name ? "GRAD" == b[a.target].short_name || "GRAD_OUTSIDE" == b[a.target].short_name ? add_to_combined_link(f, d["STOP" + b[a.source].x], d["GRAD" + b[a.target].x], a.value) : "STOP" == b[a.target].short_name || "STOP_OUTSIDE" == b[a.target].short_name ? add_to_combined_link(f, d["STOP" + b[a.source].x], d["STOP" + b[a.target].x], a.value) : add_to_combined_link(f, d["STOP" + b[a.source].x], d["ENROLLED" + b[a.target].x], a.value) : "GRAD" == b[a.target].short_name || "GRAD_OUTSIDE" == b[a.target].short_name ? add_to_combined_link(f, d["ENROLLED" + b[a.source].x], d["GRAD" + b[a.target].x], a.value) : "STOP" == b[a.target].short_name || "STOP_OUTSIDE" == b[a.target].short_name ? add_to_combined_link(f, d["ENROLLED" + b[a.source].x], d["STOP" + b[a.target].x], a.value) : add_to_combined_link(f, d["ENROLLED" + b[a.source].x], d["ENROLLED" + b[a.target].x], a.value)
    }), $.each(f, function(b, c) {
        $.each(c, function(c, d) {
            a.links.push({
                value: d,
                source: parseInt(b),
                target: parseInt(c)
            })
        })
    }), a
}

function update_title() {
    chart_title.text(selections.year + " - " + (info.collgn_map[selections.college] ? info.collgn_map[selections.college] : selections.college) + " - " + (info.majn_map[selections.major] ? info.majn_map[selections.major] : selections.major))
}

function add_legend(a, b) {
    var c = $("#" + a);
    c.empty(), c.css("width", "100%");
    var d = c.width(),
        e = d3.select("#" + a).append("svg"),
        f = e.selectAll(".legend").data(b).enter().append("g"),
        g = f.append("text").text(get_long_name).style("text-anchor", "left");
    g.each(function(a) {
        console.log(a), console.log(get_long_name(a))
    });
    var h = 0;
    g.each(function() {
        var a = this.getBBox().width;
        a > h && (h = a)
    }), h += 30;
    var i = 35,
        j = 0,
        k = 1,
        l = 0;
    g.attr("transform", function(a, b) {
        return h * (b + 1 - j) + i > d ? (l = h * (b - j), j = b, k += 1) : 1 == k && (l = h * (b + 1 - j) + i), "translate(" + (h * (b - j) + i) + ", " + 14 * k + ")"
    }), c.css("width", l + "px"), e.style("width", l + "px");
    var m = f.append("circle").attr("r", 5).style("fill", function(a) {
        return get_color(a)
    });
    j = 0, m.attr("cx", function(a, b) {
        return h * (b + 1 - j) + i > d && (j = b), h * (b - j) + i - 12
    }), j = 0, k = 1, m.attr("cy", function(a, b) {
        return h * (b + 1 - j) + i > d && (j = b, k += 1), 14 * (k - 1) + 10
    }), e.style("height", 14 * k + 6), c.css("height", 14 * k + 6)
}

function make_params() {
    var a = {
        entryyear: selections.year,
        selected_college: selections.college
    };
    return a.hs_gpa_min = null == selections.hs_gpa_min ? -1 : selections.hs_gpa_min, a.hs_gpa_max = null == selections.hs_gpa_max ? -1 : selections.hs_gpa_max, a.act_min = null == selections.act_min ? -1 : selections.act_min, a.act_max = null == selections.act_max ? -1 : selections.act_max, a.sat_min = null == selections.sat_min ? -1 : selections.sat_min, a.sat_max = null == selections.sat_max ? -1 : selections.sat_max, null == selections.gender ? null : a.gender = selections.gender, null == selections.ethnicity ? null : a.ipeds_value = selections.ethnicity, a.selected_major = "N/A" == selections.major ? "ALL" : selections.major, a.first_time_full_time = "true", window.history.pushState({}, "", "sankey?" + $.param(selections)), a
}

function update(a) {
    no_results_overlay.remove(), main_container.append(loading_overlay), "undefined" == typeof a && (a = 2);
    var b = make_params();
    d3.json(float_data_url + "?" + $.param(b), function(b, c) {
        return loading_overlay.remove(), b || null == c ? (main_container.append(no_results_overlay), console.warn(b)) : (no_results_overlay.remove(), update_data(c), update_main_chart_data($("#simple-flow").prop("checked")), c = $.extend(!0, {}, chart_data), add_legend("legend", c.table.rows), resize_chart(), update_sankey(c, a), a = 3 == a ? !0 : !1, void update_area(c, a))
    })
}

function resize_chart() {
    close_drilldown(), main_container.css("height", $(window).height() - main_container.offset().top - $("#legend").outerHeight() + "px"), margin = {
        top: 30,
        bottom: -20,
        sides: 20
    };
    var a = 1.4,
        b = {
            width: main_container.width(),
            height: main_container.height()
        };
    width = b.width - margin.sides, height = b.height - margin.top - margin.bottom, nodeWidth = .012 * width, d3.select("#sankey-svg").attr("width", width + margin.sides).attr("height", height).select("g").attr("transform", "translate(42," + margin.top + ")"), d3.select("#area-svg").attr("width", width + margin.sides).attr("height", height).select("g").attr("transform", "translate(40,20)"), overlay_height = height - margin.top - 1, overlay_width = width + margin.sides - 3, overlay.select(".overlay-background").attr("height", overlay_height).attr("width", overlay_width), overlay.select(".drilldown-close").attr("transform", "translate(" + (overlay_width - 65) + ",15)"), sankey.nodeWidth(nodeWidth).size({
        x: width - margin.sides - 2 * a - 40,
        y: height - margin.top - a - 10
    })
}

function update_data(a) {
    save_regular_chart_data = $.extend(!0, {}, a), save_simple_chart_data = calculate_simple_flow($.extend(!0, {}, a))
}

function update_main_chart_data(a) {
    chart_data = a ? $.extend(!0, {}, save_simple_chart_data) : $.extend(!0, {}, save_regular_chart_data)
}

function init(a) {
    var b = make_params();
    d3.json(float_data_url + "?" + $.param(b), function(b, c) {
        if (b) return console.warn(b);
        update_data(c), update_main_chart_data($("#simple-flow").prop("checked")), c = $.extend(!0, {}, chart_data);
        var d = d3.select("#" + a);
        sankey_svg = d.append("svg").attr("class", "chart-svg").attr("id", "sankey-svg").append("g"), area_svg = d.append("svg").attr("class", "chart-svg").attr("id", "area-svg").style("display", "none").append("g"), area_svg.append("g").attr("class", "x axis"), area_svg.append("g").attr("class", "y axis"), area_svg.append("g").attr("class", "area-group"), area_svg.append("g").attr("class", "focus-circles"), sankey = d3.sankey().nodePadding(8), sankey_svg.append("g").classed("link_base", !0), sankey_svg.append("g").classed("node_base", !0), overlay = sankey_svg.append("g").classed("overlay", !0), overlay.append("rect").attr("class", "overlay-background").attr("transform", "translate(-40,-1)"), overlay.append("g").attr("class", "drilldown-table"), overlay.append("g").attr("class", "drilldown-pie-chart");
        var e = overlay.append("g").attr("class", "drilldown-close").on("click", function() {
            close_drilldown()
        });
        return e.append("rect").style("fill", "rgba(0,0,0,0)").style("stroke", "rgba(0,0,0,0)").attr("width", 10).attr("height", 10), e.append("line").attr("stroke-linejoin", "round").attr("x1", 0).attr("y1", 0).attr("x2", 10).attr("y2", 10), e.append("line").attr("stroke-linejoin", "round").attr("x1", 10).attr("y1", 0).attr("x2", 0).attr("y2", 10), b || null == c ? (resize_chart(), main_container.append(no_results_overlay), console.warn(b)) : (add_legend("legend", c.table.rows), resize_chart(), update_sankey(c, 2), void update_area(c, !1))
    })
}

function update_sankey(a, b) {
    var c = 500;
    sankey.nodes(a.nodes).links(a.links).layout(0);
    var d, e;
    if (links = d3.select("g.link_base").selectAll(".link").data(a.links.filter(function(a) {
            return a.value > 0
        }), function(a) {
            return a.highlight ? a.source.name + "-" + a.target.name + "-highlight" : a.source.name + "-" + a.target.name
        }), nodes = d3.select("g.node_base").selectAll(".node").data(a.nodes.filter(function(a) {
            return a.value > 0
        }), function(a) {
            return a.name
        }), 3 == b ? (nodes.exit().transition().duration(animation_duration).ease(animation_easing).style("opacity", "0").remove(), links.exit().transition().duration(animation_duration).ease(animation_easing).style("opacity", "0").remove()) : (nodes.exit().remove(), links.exit().remove()), d = links.enter().append("g").attr("class", "link"), d.append("path"), d.append("text"), d.select("path").attr("d", sankey.link()).style("stroke-width", function(a) {
            return Math.max(.3, a.dy)
        }), 3 == b ? links.select("path").style("stroke", function(a) {
            return get_color(a.source.short_name)
        }).attr("class", function(a) {
            return a.source.short_name
        }).transition().duration(c).ease(animation_easing).attr("d", sankey.link()).style("stroke-width", function(a) {
            return Math.max(.3, a.dy)
        }) : links.select("path").style("stroke", function(a) {
            return get_color(a.source.short_name)
        }).attr("class", function(a) {
            return a.source.short_name
        }).attr("d", sankey.link()).style("stroke-width", function(a) {
            return Math.max(.3, a.dy)
        }), links.select("text").attr("class", "link-end-value").text(function(a) {
            return a.value
        }).attr("x", function(a) {
            return a.target.x - 5
        }).attr("y", function(a) {
            return a.target.y + a.ty + 4.5 + a.dy / 2
        }), links.classed("highlight", function(a) {
            return a.highlight
        }).classed("lowlight", function(a) {
            return a.lowlight
        }), e = nodes.enter().append("g").attr("class", "node"), 3 == b && (d.transition().duration(c).ease(animation_easing).styleTween("opacity", function() {
            return d3.interpolate(0, 1)
        }), e.transition().duration(c).ease(animation_easing).styleTween("opacity", function() {
            return d3.interpolate(0, 1)
        })), e.append("rect"), e.append("text"), total_number_students = 0, nodes.filter(function(a) {
            return 0 == a.x_orig
        }).each(function(a) {
            total_number_students += a.value
        }), nodes.select("text").attr("class", "node_text").attr("x", function(a) {
            return a.dx + 3
        }).attr("y", function(a) {
            return a.dy / 2 + 3.7
        }).html("").text("").each(function(a) {
            var b = clean_short_name(a.short_name),
                c = partition_short_name(b, 8),
                d = d3.select(this),
                e = 4.5 * (c.length - 1);
            c.forEach(function(a, b) {
                d.append("tspan").text(a).attr("x", function(a) {
                    return a.dx + 3
                }).attr("y", function(a) {
                    return a.dy / 2 + 3.7 - e
                }).attr("dy", 8 * b)
            })
        }), e.attr("transform", function(a) {
            return "translate(" + a.x + "," + a.y + ")"
        }).select("rect").attr("height", function(a) {
            return Math.max(1, a.dy)
        }).attr("width", sankey.nodeWidth()), 3 == b ? nodes.transition().duration(c).ease(animation_easing).attr("transform", function(a) {
            return "translate(" + a.x + "," + a.y + ")"
        }).select("rect").attr("height", function(a) {
            return Math.max(1, a.dy)
        }).attr("width", sankey.nodeWidth()) : nodes.attr("transform", function(a) {
            return "translate(" + a.x + "," + a.y + ")"
        }).select("rect").attr("height", function(a) {
            return Math.max(1, a.dy)
        }).attr("width", sankey.nodeWidth()), nodes.on("click", node_click).select("rect").on("mouseover", node_mouseover).on("mouseout", node_mouseout), node_heading_anchors = {}, nodes.each(function(a) {
            node_heading_anchors[a.x_orig] = a
        }), "undefined" == typeof InstallTrigger) {
        var f = 2e3 / a.table.columns.length,
            g = f / 10;
        0 == b ? (links.select("path").attr("stroke-dasharray", function() {
            return this.getTotalLength() + " " + this.getTotalLength()
        }).attr("stroke-dashoffset", function() {
            return this.getTotalLength()
        }).transition().duration(f).ease("linear").delay(function(a) {
            return a.source.x_orig * f + a.source.x_orig * g
        }).attr("stroke-dashoffset", 0), nodes.select("rect").style("fill-opacity", 0).style("stroke-opacity", 0).transition().duration(g).ease("linear").delay(function(a) {
            return a.x_orig * f + (a.x_orig - 1) * g
        }).style("fill-opacity", 1).style("stroke-opacity", 1)) : 1 == b ? (d3.selectAll(".link.highlight").select("path").attr("stroke-dasharray", function() {
            return this.getTotalLength() + " " + this.getTotalLength()
        }).attr("stroke-dashoffset", function() {
            return this.getTotalLength()
        }).transition().duration(f).ease("linear").delay(function(a) {
            return a.source.x_orig * f + a.source.x_orig * g
        }).attr("stroke-dashoffset", 0), nodes.select("rect").style("fill-opacity", 1).style("stroke-opacity", 1)) : (links.select("path").attr("stroke-dasharray", "").attr("stroke-dashoffset", "0.00"), nodes.select("rect").style("fill-opacity", 1).style("stroke-opacity", 1))
    }
    sankey_svg.select(".sankey_headers").remove();
    var h = sankey_svg.append("g").attr("class", "sankey_headers"),
        i = 0;
    $.each(node_heading_anchors, function(a, b) {
        h.append("g").data([a]).on("click", term_header_click).append("text").text("Term " + (parseInt(a) + 1)).attr("x", b.x + nodeWidth / 2).attr("y", -7).attr("text-anchor", "middle");
        i += 1
    })
}

function year_selector_click(a) {
    $(".options-list").remove(), a.hasClass("expanded") ? (a.find(".fa.fa-caret-up").replaceWith('<i class="fa fa-caret-down"></i>'), a.removeClass("expanded")) : ($(".main-selector-cell.with-select .fa.fa-caret-up").replaceWith('<i class="fa fa-caret-down"></i>'), a.find(".fa.fa-caret-down").replaceWith('<i class="fa fa-caret-up"></i>'), $(".main-selector-cell.with-select").removeClass("expanded"), a.addClass("expanded"), year_options = '<div class="options-list">', $.each(info.years, function(a) {
        year_options += a != selections.year ? '<div class="option">' + a + "</div>" : '<div class="selected-option">' + a + "</div>"
    }), year_options += "</div>", a.append(year_options)), $(".option").click(function() {
        $(".option").unbind("click"), selections.year = $(this).text(), selections.college = "ALL", selections.major = "N/A", console.log(selections), update_title(), close_drilldown(), update()
    })
}

function college_selector_click(a) {
    $(".options-list").remove(), a.hasClass("expanded") ? (a.find(".fa.fa-caret-up").replaceWith('<i class="fa fa-caret-down"></i>'), a.removeClass("expanded")) : ($(".main-selector-cell.with-select .fa.fa-caret-up").replaceWith('<i class="fa fa-caret-down"></i>'), a.find(".fa.fa-caret-down").replaceWith('<i class="fa fa-caret-up"></i>'), $(".main-selector-cell.with-select").removeClass("expanded"), a.addClass("expanded"), college_options = '<div class="options-list">', $.each(info.years[selections.year], function(a) {
        college_options += a != selections.college ? '<div class="option" data-code="' + a + '">' + (info.collgn_map[a] ? info.collgn_map[a] : a) + "</div>" : '<div class="selected-option" data-code="' + a + '">' + (info.collgn_map[a] ? info.collgn_map[a] : a) + "</div>"
    }), college_options += "</div>", a.append(college_options)), $(".option").click(function() {
        $(".option").unbind("click"), selections.college = $(this).attr("data-code"), selections.major = "ALL" == selections.college ? "N/A" : selections.major = "ALL", console.log(selections), update_title(), close_drilldown(), update()
    })
}

function major_selector_click(a) {
    $(".options-list").remove(), a.hasClass("expanded") ? (a.find(".fa.fa-caret-up").replaceWith('<i class="fa fa-caret-down"></i>'), a.removeClass("expanded")) : ($(".main-selector-cell.with-select .fa.fa-caret-up").replaceWith('<i class="fa fa-caret-down"></i>'), a.find(".fa.fa-caret-down").replaceWith('<i class="fa fa-caret-up"></i>'), $(".main-selector-cell.with-select").removeClass("expanded"), a.addClass("expanded"), major_options = '<div class="options-list">', $.each(info.years[selections.year][selections.college], function(a, b) {
        major_options += b != selections.major ? '<div class="option" data-code="' + b + '">' + (info.majn_map[b] ? info.majn_map[b] : b) + "</div>" : '<div class="selected-option" data-code="' + b + '">' + (info.majn_map[b] ? info.majn_map[b] : b) + "</div>"
    }), major_options += "</div>", a.append(major_options)), $(".option").click(function() {
        $(".option").unbind("click"), selections.major = $(this).attr("data-code"), console.log(selections), update_title(), close_drilldown(), update()
    })
}

function more_options_click() {
    $("#more-options-wrapper").toggle(0, function() {
        var a = $.extend(!0, {}, chart_data);
        resize_chart(), update_sankey(a, 2), update_area(a, !1)
    })
}

function setup_more_options() {
    var a = $(".slider-label#sat-slider"),
        b = $(".slider-label#act-slider"),
        c = $(".slider-label#hs-gpa-slider");
    $("select#gender").change(function() {
        selections.gender = "Any" == $(this).val() ? null : $(this).val(), update(3)
    }), $("select#ethnicity").change(function() {
        selections.ethnicity = "Any" == $(this).val() ? null : $(this).val(), update(3)
    }), sat_slider = $("#sat-slider").slider({
        range: !0,
        min: sat_range[0],
        max: sat_range[1],
        step: 100,
        values: sat_range,
        slide: function(b, c) {
            a.text(get_slider_label_text(c.values, sat_range))
        },
        change: function(a, b) {
            var c = get_slider_values(b.values, sat_range);
            selections.sat_min = c[0], selections.sat_max = c[1], update(3)
        }
    }), act_slider = $("#act-slider").slider({
        range: !0,
        min: act_range[0],
        max: act_range[1],
        step: 1,
        values: act_range,
        slide: function(a, c) {
            b.text(get_slider_label_text(c.values, act_range))
        },
        change: function(a, b) {
            var c = get_slider_values(b.values, act_range);
            selections.act_min = c[0], selections.act_max = c[1], update(3)
        }
    }), hs_gpa_slider = $("#hs-gpa-slider").slider({
        range: !0,
        min: hs_gpa_range[0],
        max: hs_gpa_range[1] + .1,
        step: .1,
        values: hs_gpa_range,
        slide: function(a, b) {
            c.text(get_slider_label_text(b.values, hs_gpa_range))
        },
        change: function(a, b) {
            var c = get_slider_values(b.values, hs_gpa_range);
            selections.hs_gpa_min = c[0], selections.hs_gpa_max = c[1], update(3)
        }
    }), a.text(get_slider_label_text(sat_range, sat_range)), b.text(get_slider_label_text(act_range, act_range)), c.text(get_slider_label_text(hs_gpa_range, hs_gpa_range)), $(".more-options-close").click(function() {
        $("#more-options-wrapper").slideUp(0, function() {
            var a = $.extend(!0, {}, chart_data);
            resize_chart(), update_sankey(a, 2), update_area(a, !1)
        })
    }), $("#simple-flow").change(function() {
        var a = $(this).prop("checked");
        update_main_chart_data(a);
        var b = $.extend(!0, {}, chart_data);
        add_legend("legend", b.table.rows), resize_chart(), update_sankey(b, 3), update_area(b, !1)
    })
}

function setup_tabs() {
    var a = $(".chart-tab");
    a.click(function() {
        tab = $(this), tab_id = tab.attr("id"), a.removeClass("selected"), tab.addClass("selected"), d3.selectAll(".chart-svg").style("display", "none"), d3.select("#" + tab_id + "-svg").style("display", "inline")
    })
}
var year_selector, college_selector, major_selector, chart_title, chart_data, links, nodes, show_undecided_decided_flow = !1,
    color, sankey_svg, area_svg, area_focused_circle, area_focused_term, sankey, width, height, nodeWidth, main_container, overlay, overlay_width, overlay_height, margin, sat_slider, act_slider, hs_gpa_slider, total_number_students = 0,
    sat_range = [400, 2400],
    act_range = [1, 36],
    hs_gpa_range = [1, 4.5],
    animation_duration = 500,
    animation_easing = "sin-in-out",
    save_regular_chart_data, save_simple_chart_data;
$.urlParam = function(a) {
    var b = new RegExp("[?&;]" + a + "=([^&;#]*)").exec(window.location.href);
    return b ? b[1] : 1
};
var university_number = $.urlParam("university");
university_number = university_number ? university_number : 1;
var float_data_url = "http://ec2-107-22-178-192.compute-1.amazonaws.com:8082/university/" + university_number + "/sankey_flow/main",
    loading_overlay = $("<div>", {
        "class": "loading-overlay",
        html: '<i class="fa fa-spinner fa-3x fa-spin"></i>'
    }),
    no_results_overlay = $("<div>", {
        "class": "no-results-overlay",
        html: "<div>There were no students who met that criteria.<br /> Please adjust your search parameters.</div>"
    }),
    tooltip_header = $("<h4>", {
        text: ""
    }),
    tooltip_content = $("<div>", {
        text: ""
    }),
    tooltip = $("<div>", {
        "class": "general-tooltip"
    });
    console.log(float_data_url);
tooltip.append(tooltip_header).append(tooltip_content);
var get_color = function(a) {
        return "GRAD" == a ? "#0D5C0C" : "STOP" == a ? "#CD5C5C" : "GRAD_OUTSIDE" == a ? "#4D9C4C" : "STOP_OUTSIDE" == a ? "#dD8C8C" : color(a)
    },
    get_long_name = function(a) {
        switch (a) {
            case "GRAD":
                return "Graduated";
            case "STOP":
                return "Stopped Out";
            case "GRAD_OUTSIDE":
                return "Graduated Outside";
            case "STOP_OUTSIDE":
                return "Stopped Out Outside"
        }
        return show_undecided_decided_flow ? info.collgn_map[a] || a : "ALL" != selections.major && "N/A" != selections.major ? (s_key = a.split("_"), toTitleCase(s_key.length > 2 ? (info.collgn_map[s_key[0]] ? info.collgn_map[s_key[0]] : s_key[0]) + " Non " + (info.majn_map[s_key[2]] ? info.majn_map[s_key[2]] : s_key[2]) : s_key.length > 1 && "GRAD_OUTSIDE" != a && "STOP_OUTSIDE" != a ? (info.collgn_map[s_key[0]] ? info.collgn_map[s_key[0]] : s_key[0]) + " " + (info.majn_map[s_key[1]] ? info.majn_map[s_key[1]] : s_key[1]) : info.majn_map[a] ? info.majn_map[a] : a)) : toTitleCase("ALL" != selections.college ? info.majn_map[a] ? info.majn_map[a] : a : info.collgn_map[a] ? info.collgn_map[a] : a)
    };
d3.selection.prototype.moveToFront = function() {
    return this.each(function() {
        this.parentNode.appendChild(this)
    })
}, $(document).ready(function() {
    setup_more_options(), main_container = $("#chart"), color = d3.scale.category20c(), year_selector = $("#year-selector"), college_selector = $("#college-selector"), major_selector = $("#major-selector"), chart_title = $("#chart-title"), $(".main-selector-cell.with-select#year").click(function() {
        year_selector_click($(this))
    }), $(".main-selector-cell.with-select#college").click(function() {
        college_selector_click($(this))
    }), $(".main-selector-cell.with-select#major").click(function() {
        major_selector_click($(this))
    }), $(".main-selector-cell#more-options").click(function() {
        more_options_click($(this))
    }), update_title(), init("chart"), setup_tabs(), $(window).on("resize", function() {
        resize_chart();
        var a = $.extend(!0, {}, chart_data);
        add_legend("legend", a.table.rows), update_sankey(a), update_area(a, !0)
    })
});
var node_click = function(a) {
        main_container.append(loading_overlay);
        var b = make_params();
        b.node_x_selected = a.x_orig, b.node_y_selected = a.short_name, d3.json(float_data_url + "?" + $.param(b), function(a, b) {
            loading_overlay.remove();
            var c = {};
            $.each(b.links, function(a, b) {
                c[b.source + "," + b.target] = b
            });
            var d = [];
            return $.each(chart_data.links, function(a, b) {
                c[b.source + "," + b.target] ? (d.push({
                    value: b.value - c[b.source + "," + b.target].value,
                    source: b.source,
                    target: b.target,
                    lowlight: !0
                }), d.push({
                    value: c[b.source + "," + b.target].value,
                    source: b.source,
                    target: b.target,
                    highlight: !0
                })) : d.push({
                    value: b.value,
                    source: b.source,
                    target: b.target,
                    lowlight: !0
                })
            }), b.links = d, a ? console.warn(a) : (update_sankey(b, 1), $(document).bind("mouseup", function(a) {
                $(window).unbind("blur"), $(document).unbind("mouseup");
                var b = $(".node");
                b.is(a.target) || 0 !== b.has(a.target).length || node_unclick()
            }), void $(window).blur(function() {
                $(window).unbind("blur"), $(document).unbind("mouseup"), node_unclick()
            }))
        })
    },
    node_unclick = function() {
        var a = $.extend(!0, {}, chart_data);
        add_legend("legend", chart_data.table.rows), resize_chart(), update_sankey(a, 2)
    },
    node_mouseover = function(a) {
        tooltip_header.text(get_long_name(a.short_name)), tooltip_header.css({
            "border-bottom": "2px solid " + get_color(a.short_name)
        }), tooltip_content.text("Students: " + a.value + " (" + (a.value / total_number_students * 100).toFixed(2) + "%)"), $("body").append(tooltip), a.x < width / 2 ? (tooltip.css({
            right: "auto",
            left: d3.event.pageX - d3.mouse(this)[0] + 35,
            top: d3.event.pageY + 11 - d3.mouse(this)[1] + this.getBBox().height / 2 - tooltip.height() / 2
        }), tooltip.addClass("left"), tooltip.removeClass("right")) : (tooltip.addClass("right"), tooltip.removeClass("left"), tooltip.css({
            left: "auto",
            right: $(document).width() - d3.event.pageX + d3.mouse(this)[0] + 20,
            top: d3.event.pageY + 11 - d3.mouse(this)[1] + this.getBBox().height / 2 - tooltip.height() / 2
        }))
    },
    node_mouseout = function() {
        $(".general-tooltip").remove()
    },
    term_header_click = function(a) {
        overlay.style("display", "inline");
        var b = 500,
            c = d3.select(this),
            d = d3.selectAll(".sankey_headers g"),
            e = overlay.select(".drilldown-table"),
            f = overlay.select(".drilldown-pie-chart"),
            g = 40,
            h = 21,
            i = width / 6;
        d.classed("clicked", !1), c.classed("clicked", !0);
        var j = nodes.data().filter(function(b) {
            return b.x_orig == a && b.value > 0
        });
        j = j.map(function(a) {
            return {
                label: a.short_name,
                value: a.value
            }
        }), j.sort(function(a, b) {
            return b.value - a.value
        }), drilldown_data_minified = j.slice(0, Math.floor((height - 2 * g) / h));
        var k = 0,
            l = "";
        chart_data.table.rows.forEach(function(a) {
            k < get_long_name(a).length && (k = get_long_name(a).length, l = get_long_name(a))
        });
        var m = (height - 2 * g - drilldown_data_minified.length * h) / 2,
            n = Math.max.apply(Math, drilldown_data_minified.map(function(a) {
                return a.value
            })),
            o = e.selectAll(".drilldown-table-row").data(drilldown_data_minified, function(a) {
                return a.label
            }),
            p = o.enter().append("g").attr("class", "drilldown-table-row").attr("transform", function(a, b) {
                return "translate(0," + (b * h + g + m) + ")"
            }).style("opacity", 0),
            q = e.select(".drilldown-table-row").append("text").text(l).attr("class", "test-longest-text");
        k = q.node().getBBox().width, q.remove();
        var r = d3.scale.linear().domain([0, n]).range([0, i]);
        p.append("text").attr("class", "drilldown-bar-label").text(function(a) {
            return get_long_name(a.label)
        }), p.append("rect").attr("class", "drilldown-bar").style("fill", function(a) {
            return get_color(a.label)
        }).attr("height", 18).attr("width", 0).attr("y", -13).attr("x", 10), p.append("text").attr("class", "drilldown-bar-value").text("0"), o.exit().transition().duration(b / 2).ease(animation_easing).style("opacity", "0").remove(), o.transition().duration(b / 2).delay(function(a, b) {
            return 40 * b
        }).ease(animation_easing).attr("transform", function(a, b) {
            return "translate(0," + (b * h + g + m) + ")"
        }).style("opacity", 1), o.select("rect").transition().duration(b).ease(animation_easing).attr("width", function(a) {
            return r(a.value)
        }), o.select(".drilldown-bar-value").transition().duration(b).ease(animation_easing).attr("x", function(a) {
            return r(a.value) + 15
        }).tween("text", function(a) {
            var b = d3.interpolate(this.textContent, a.value);
            return function(a) {
                this.textContent = Math.round(b(a))
            }
        });
        var s = {};
        chart_data.table.rows.forEach(function(a) {
            s[a] = 0
        }), j.forEach(function(a) {
            s[a.label] = a.value
        });
        var t = [];
        for (var u in s) t.push({
            label: u,
            value: s[u]
        }); {
            var v = d3.layout.pie().value(function(a) {
                    return a.value
                }).sort(function(a, b) {
                    return a.label < b.label ? -1 : a.label > b.label ? 1 : 0
                }),
                w = Math.max(Math.min((overlay_height - 2 * g) / 2, (overlay_width - (i + 100 + 300 + k)) / 2), 70),
                x = d3.svg.arc().outerRadius(w).innerRadius(.5 * w),
                y = f.selectAll("g.slice").data(v(t), function(a) {
                    return a.data.label
                }),
                z = {
                    startAngle: 2 * Math.PI,
                    endAngle: 2 * Math.PI
                },
                A = y.enter().append("g").attr("class", "slice");
            A.append("path").attr("d", function() {
                return x(z)
            }).each(function(a) {
                this._current = {
                    data: a.data,
                    value: a.value,
                    startAngle: z.startAngle,
                    endAngle: z.endAngle
                }
            })
        }
        o.each(function(a) {
            this.corresponding_element = y.filter(function(b) {
                return a.label == b.data.label
            })
        }).on("mouseover", function(a) {
            drilldown_element_mouseover(d3.select(this), this.corresponding_element, a.label, a.value)
        }).on("mouseout", function() {
            drilldown_element_mouseout(d3.select(this), this.corresponding_element)
        }), y.each(function(a) {
            this.corresponding_element = o.filter(function(b) {
                return b.label == a.data.label
            })
        }).on("mouseover", function(a) {
            drilldown_element_mouseover(this.corresponding_element, d3.select(this), a.data.label, a.data.value)
        }).on("mouseout", function(a) {
            drilldown_element_mouseout(this.corresponding_element, d3.select(this), a.data.label, a.data.value)
        }), y.selectAll("text").transition().duration(b / 4).ease(animation_easing).styleTween("fill-opacity", function() {
            return d3.interpolate(1, 0)
        }).remove(), y.filter(function(a) {
            return a.value / total_number_students > .03
        }).append("text").attr("transform", function(a) {
            return "translate(" + x.centroid(a) + ")"
        }).style("fill-opacity", "0").text(function(a) {
            return (a.value / total_number_students * 100).toFixed(1) + "%"
        }).transition().duration(b / 2).delay(b / 2).ease(animation_easing).style("fill-opacity", 1), y.exit().remove(), y.select("path").attr("fill", function(a) {
            return get_color(a.data.label)
        }).transition().duration(b).ease(animation_easing).attrTween("d", function(a) {
            var b = d3.interpolate(this._current, a);
            return this._current = b(0),
                function(a) {
                    return x(b(a))
                }
        });
        var B = ($(document).width() - (i + 2 * w + 300 + k)) / 2;
        e.attr("transform", "translate(" + (B + k) + ",0)"), f.attr("transform", "translate(" + Math.min(width - 1.5 * w, B + i + 350 + k) + "," + (w + (overlay_height - 2 * w) / 2) + ")")
    };
close_drilldown = function() {
    var a = d3.selectAll(".sankey_headers g");
    a.classed("clicked", !1), overlay.style("display", "none");
    var b = overlay.select(".drilldown-table");
    b.html("");
    var c = overlay.select(".drilldown-pie-chart");
    c.html("")
}, drilldown_element_mouseover = function(a, b, c, d) {
    a.select("rect").transition().duration(100).style("stroke-width", "1.5").style("stroke", "white"), b.select("path").transition().duration(100).attr("transform", "scale(1.025)"), b.select("text").style("font-weight", "bold"), tooltip_header.text(get_long_name(c)), tooltip_header.css({
        "border-bottom": "2px solid " + get_color(c)
    }), tooltip_content.text("Students: " + d + " (" + (d / total_number_students * 100).toFixed(2) + "%)"), $("body").append(tooltip), tooltip.css({
        right: "auto",
        left: d3.event.pageX,
        top: d3.event.pageY
    }), tooltip.removeClass("right"), tooltip.removeClass("left")
}, drilldown_element_mouseout = function(a, b) {
    a.select(".drilldown-bar-label").style("fill", ""), a.select("rect").transition().duration(50).style("stroke-width", "").style("stroke", ""), b.select("path").transition().duration(50).attr("transform", "scale(1)"), b.select("text").style("font-weight", ""), $(".general-tooltip").remove()
};